CREATE OR REPLACE TRIGGER insert_driver_availability
AFTER INSERT ON driver
FOR EACH ROW
BEGIN
  INSERT INTO availability (d_id, is_available,LAST_UPDATED)
  VALUES (:NEW.id, 1,CURRENT_TIMESTAMP);
END;
/


CREATE OR REPLACE TRIGGER trg_running_trip_insert
AFTER INSERT ON RUNNING_TRIP
FOR EACH ROW
BEGIN
    UPDATE AVAILABILITY
    SET IS_AVAILABLE = 0, LAST_UPDATED = CURRENT_TIMESTAMP
    WHERE D_ID = :NEW.D_ID;
    
END;
/

CREATE OR REPLACE TRIGGER trg_running_trip_delete
BEFORE DELETE ON RUNNING_TRIP
FOR EACH ROW
BEGIN
    UPDATE AVAILABILITY
    SET IS_AVAILABLE = 1, LAST_UPDATED = CURRENT_TIMESTAMP
    WHERE D_ID = :OLD.D_ID;
    
END;
/








CREATE OR REPLACE TRIGGER deleteRunning
AFTER INSERT ON TRIP_HISTORY
FOR EACH ROW
BEGIN
    DELETE from RUNNING_TRIP WHERE TR_ID=:new.TR_ID;
END;
/






CREATE OR REPLACE TRIGGER making_payment
AFTER INSERT ON TRIP_HISTORY
FOR EACH ROW
BEGIN
    
		MAKE_TRANSACTION(:new.USERNAME,:new.PLATE_NO,:new.fare);
END;
/



CREATE OR REPLACE TRIGGER paymentTableInsert
AFTER INSERT ON TRIP_HISTORY
FOR EACH ROW
BEGIN
    INSERT into PAYMENTS(TR_ID,AMOUNT,TRANSACTION_NO)
VALUES(:new.TR_ID,:new.FARE,generate_transaction_no());
		
END;
/


CREATE OR REPLACE TRIGGER delete_running_trip
AFTER INSERT ON trip_history
FOR EACH ROW
BEGIN
    DELETE FROM running_trip
    WHERE tr_id = :new.tr_id;
END;
/









CREATE or REPLACE trigger fill_nulls
before INSERT or DELETE or UPDATE
on TRIP_HISTORY
for each ROW
DECLARE
payment_when timestamp;

BEGIN

for R in (SELECT TR_ID FROM TRIP_HISTORY WHERE FINISH_TIME IS NULL)
LOOP
	 SELECT PAYMENT_TIME into payment_when from PAYMENTS WHERE TR_ID=R.TR_ID;
	 UPDATE TRIP_HISTORY
	 SET FINISH_TIME=PAYMENT_WHEN 
	 WHERE TR_ID=R.TR_ID;
END LOOP;



END;
/

